#
i
n
c
l
u
d
e
SPACE
<
s
t
d
i
o
.
h
>
ENTER
ENTER
i
n
t
SPACE
m
a
i
n
(
)
SPACE
{
ENTER
/
/
SPACE
p
r
i
n
t
f
(
)
SPACE
d
i
s
p
l
a
y
s
SPACE
t
h
e
SPACE
s
t
r
i
n
g
SPACE
i
n
s
i
d
e
SPACE
q
u
o
t
a
t
i
o
n
ENTER
p
r
i
n
t
f
(
"
H
e
l
l
o
,
SPACE
W
o
r
l
d
!
"
)
;
ENTER
r
e
t
u
r
n
SPACE
0
;
ENTER
}
ENTER
ENTER
#
i
n
c
l
u
d
e
<
s
t
d
i
o
.
h
>
ENTER
ENTER
i
n
t
SPACE
m
a
i
n
(
)
ENTER
{
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
t
t
S
t
u
d
y
t
o
n
i
g
h
t
SPACE
-
SPACE
B
e
s
t
SPACE
p
l
a
c
e
SPACE
t
o
SPACE
l
e
a
r
n
n
n
n
"
)
;
ENTER
ENTER
/
T
A
B
/
SPACE
i
n
t
SPACE
n
u
m
1
,
SPACE
n
u
m
2
;
SPACE
ENTER
/
T
A
B
/
SPACE
f
l
o
a
t
SPACE
f
r
a
c
t
i
o
n
;
/
T
A
B
/
SPACE
ENTER
/
T
A
B
/
SPACE
c
h
a
r
SPACE
c
h
a
r
a
c
t
e
r
;
ENTER
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
E
n
t
e
r
SPACE
t
w
o
SPACE
n
u
m
b
e
r
s
SPACE
n
u
m
b
e
r
n
"
)
;
ENTER
/
T
A
B
/
SPACE
ENTER
/
T
A
B
/
SPACE
/
/
SPACE
T
a
k
i
n
g
SPACE
i
n
t
e
g
e
r
SPACE
a
s
SPACE
i
n
p
u
t
SPACE
f
r
o
m
SPACE
u
s
e
r
ENTER
/
T
A
B
/
SPACE
s
c
a
n
f
(
"
%
d
%
i
"
,
SPACE
&
n
u
m
1
,
SPACE
&
n
u
m
2
)
;
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
T
h
e
SPACE
t
w
o
SPACE
n
u
m
b
e
r
s
SPACE
Y
o
u
SPACE
h
a
v
e
SPACE
e
n
t
e
r
e
d
SPACE
a
r
e
SPACE
%
d
SPACE
a
n
d
SPACE
%
i
n
n
"
,
SPACE
n
u
m
1
,
SPACE
n
u
m
2
)
;
ENTER
ENTER
/
T
A
B
/
SPACE
/
/
SPACE
T
a
k
i
n
g
SPACE
f
l
o
a
t
SPACE
o
r
SPACE
f
r
a
c
t
i
o
n
SPACE
a
s
SPACE
i
n
p
u
t
SPACE
f
r
o
m
SPACE
t
h
e
SPACE
u
s
e
r
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
E
n
t
e
r
SPACE
a
SPACE
D
e
c
i
m
a
l
SPACE
n
u
m
b
e
r
n
"
)
;
ENTER
/
T
A
B
/
SPACE
s
c
a
n
f
(
"
%
f
"
,
SPACE
&
f
r
a
c
t
i
o
n
)
;
SPACE
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
T
h
e
SPACE
f
l
o
a
t
SPACE
o
r
SPACE
f
r
a
c
t
i
o
n
SPACE
t
h
a
t
SPACE
y
o
u
SPACE
h
a
v
e
SPACE
e
n
t
e
r
e
d
SPACE
i
s
SPACE
%
f
"
,
SPACE
f
r
a
c
t
i
o
n
)
;
ENTER
ENTER
/
T
A
B
/
SPACE
/
/
SPACE
T
a
k
i
n
g
SPACE
C
h
a
r
a
c
t
e
r
SPACE
a
s
SPACE
i
n
p
u
t
SPACE
f
r
o
m
SPACE
t
h
e
SPACE
u
s
e
r
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
E
n
t
e
r
SPACE
a
SPACE
C
h
a
r
a
c
t
e
r
n
"
)
;
ENTER
/
T
A
B
/
SPACE
s
c
a
n
f
(
"
%
c
"
,
&
c
h
a
r
a
c
t
e
r
)
;
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
T
h
e
SPACE
c
h
a
r
a
c
t
e
r
SPACE
t
h
a
t
SPACE
y
o
u
SPACE
h
a
v
e
SPACE
e
n
t
e
r
e
d
SPACE
i
s
SPACE
%
c
"
,
SPACE
c
h
a
r
a
c
t
e
r
)
;
ENTER
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
t
t
t
C
o
d
i
n
g
SPACE
i
s
SPACE
F
u
n
SPACE
!
n
n
n
"
)
;
ENTER
/
T
A
B
/
SPACE
ENTER
/
T
A
B
/
SPACE
r
e
t
u
r
n
SPACE
0
;
ENTER
}
ENTER
ENTER
#
i
n
c
l
u
d
e
<
s
t
d
i
o
.
h
>
ENTER
ENTER
i
n
t
SPACE
a
,
b
;
ENTER
i
n
t
SPACE
m
a
i
n
(
)
ENTER
{
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
t
t
S
t
u
d
y
t
o
n
i
g
h
t
SPACE
-
SPACE
B
e
s
t
SPACE
p
l
a
c
e
SPACE
t
o
SPACE
l
e
a
r
n
n
n
n
"
)
;
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
E
n
t
e
r
SPACE
t
h
e
SPACE
t
w
o
SPACE
v
a
l
u
e
s
SPACE
t
o
SPACE
f
i
n
d
SPACE
t
h
e
SPACE
g
r
e
a
t
e
s
t
SPACE
a
n
d
SPACE
s
m
a
l
l
e
s
t
SPACE
n
u
m
b
e
r
:
SPACE
n
"
)
;
ENTER
/
T
A
B
/
SPACE
s
c
a
n
f
(
"
%
d
%
d
"
,
SPACE
&
a
,
SPACE
&
b
)
;
ENTER
ENTER
/
T
A
B
/
SPACE
i
f
(
a
SPACE
=
=
SPACE
b
)
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
B
o
t
h
SPACE
a
r
e
SPACE
e
q
u
a
l
n
"
)
;
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
ENTER
/
T
A
B
/
SPACE
e
l
s
e
SPACE
i
f
(
a
SPACE
<
SPACE
b
)
ENTER
/
T
A
B
/
SPACE
{
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
T
h
e
SPACE
l
a
r
g
e
s
t
SPACE
n
u
m
b
e
r
SPACE
i
s
SPACE
%
0
3
d
n
"
,
SPACE
b
)
;
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
T
h
e
SPACE
s
m
a
l
l
e
s
t
SPACE
n
u
m
b
e
r
SPACE
i
s
SPACE
%
0
3
d
n
"
,
SPACE
a
)
;
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
T
h
e
SPACE
l
a
r
g
e
s
t
SPACE
n
u
m
b
e
r
SPACE
i
s
SPACE
%
0
3
d
n
"
,
SPACE
b
)
;
ENTER
/
T
A
B
/
SPACE
}
ENTER
/
T
A
B
/
SPACE
e
l
s
e
/
T
A
B
/
SPACE
/
/
O
n
l
y
SPACE
p
o
s
s
i
b
i
l
i
t
y
SPACE
r
e
m
a
i
n
i
n
g
ENTER
/
T
A
B
/
SPACE
{
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
T
h
e
SPACE
l
a
r
g
e
s
t
SPACE
n
u
m
b
e
r
SPACE
i
s
SPACE
%
0
3
d
n
"
,
SPACE
a
)
;
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
T
h
e
SPACE
s
m
a
l
l
e
s
t
SPACE
n
u
m
b
e
r
SPACE
i
s
SPACE
%
0
3
d
n
"
,
SPACE
b
)
;
ENTER
/
T
A
B
/
SPACE
}
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
n
n
t
t
t
C
o
d
i
n
g
SPACE
i
s
SPACE
F
u
n
SPACE
!
n
n
n
"
)
;
ENTER
/
T
A
B
/
SPACE
r
e
t
u
r
n
SPACE
0
;
ENTER
}
ENTER
ENTER
#
i
n
c
l
u
d
e
SPACE
<
s
t
d
i
o
.
h
>
SPACE
ENTER
/
/
SPACE
F
u
n
c
t
i
o
n
SPACE
t
o
SPACE
s
w
a
p
SPACE
e
l
e
m
e
n
t
s
SPACE
ENTER
v
o
i
d
SPACE
s
w
a
p
(
i
n
t
SPACE
*
a
,
SPACE
i
n
t
SPACE
*
b
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
t
e
m
p
SPACE
=
SPACE
*
a
;
SPACE
ENTER
*
a
SPACE
=
SPACE
*
b
;
SPACE
ENTER
*
b
SPACE
=
SPACE
t
e
m
p
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
b
u
b
b
l
e
SPACE
s
o
r
t
SPACE
f
u
n
c
t
i
o
n
ENTER
v
o
i
d
SPACE
b
u
b
b
l
e
S
o
r
t
(
i
n
t
SPACE
a
r
r
a
y
[
]
,
SPACE
i
n
t
SPACE
n
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
i
,
SPACE
j
;
SPACE
ENTER
f
o
r
SPACE
(
i
SPACE
=
SPACE
0
;
SPACE
i
SPACE
<
SPACE
n
-
1
;
SPACE
i
+
+
)
/
T
A
B
/
SPACE
ENTER
f
o
r
SPACE
(
j
SPACE
=
SPACE
0
;
SPACE
j
SPACE
<
SPACE
n
-
i
-
1
;
SPACE
j
+
+
)
SPACE
i
f
SPACE
(
a
r
r
a
y
[
j
]
SPACE
>
SPACE
a
r
r
a
y
[
j
+
1
]
)
SPACE
ENTER
s
w
a
p
(
&
a
r
r
a
y
[
j
]
,
SPACE
&
a
r
r
a
y
[
j
+
1
]
)
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
F
u
n
c
t
i
o
n
SPACE
t
o
SPACE
p
r
i
n
t
SPACE
t
h
e
SPACE
e
l
e
m
e
n
t
s
SPACE
o
f
SPACE
a
n
SPACE
a
r
r
a
y
ENTER
v
o
i
d
SPACE
p
r
i
n
t
A
r
r
a
y
(
i
n
t
SPACE
a
r
r
a
y
[
]
,
SPACE
i
n
t
SPACE
s
i
z
e
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
i
;
SPACE
ENTER
f
o
r
SPACE
(
i
=
0
;
SPACE
i
SPACE
<
SPACE
s
i
z
e
;
SPACE
i
+
+
)
SPACE
ENTER
p
r
i
n
t
f
(
"
%
d
SPACE
"
,
SPACE
a
r
r
a
y
[
i
]
)
;
SPACE
ENTER
p
r
i
n
t
f
(
"
n
"
)
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
M
a
i
n
SPACE
F
u
n
c
t
i
o
n
ENTER
i
n
t
SPACE
m
a
i
n
(
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
a
r
r
a
y
[
]
SPACE
=
SPACE
{
8
9
,
SPACE
3
2
,
SPACE
2
0
,
SPACE
1
1
3
,
SPACE
-
1
5
}
;
SPACE
ENTER
i
n
t
SPACE
s
i
z
e
SPACE
=
SPACE
s
i
z
e
o
f
(
a
r
r
a
y
)
/
s
i
z
e
o
f
(
a
r
r
a
y
[
0
]
)
;
SPACE
ENTER
b
u
b
b
l
e
S
o
r
t
(
a
r
r
a
y
,
SPACE
s
i
z
e
)
;
SPACE
ENTER
p
r
i
n
t
f
(
"
S
o
r
t
e
d
SPACE
a
r
r
a
y
:
SPACE
n
"
)
;
SPACE
ENTER
p
r
i
n
t
A
r
r
a
y
(
a
r
r
a
y
,
SPACE
s
i
z
e
)
;
SPACE
ENTER
r
e
t
u
r
n
SPACE
0
;
SPACE
ENTER
}
ENTER
ENTER
#
i
n
c
l
u
d
e
SPACE
<
m
a
t
h
.
h
>
SPACE
ENTER
#
i
n
c
l
u
d
e
SPACE
<
s
t
d
i
o
.
h
>
SPACE
ENTER
/
/
SPACE
I
n
s
e
r
t
i
o
n
SPACE
S
o
r
t
SPACE
F
u
n
c
t
i
o
n
ENTER
v
o
i
d
SPACE
i
n
s
e
r
t
i
o
n
S
o
r
t
(
i
n
t
SPACE
a
r
r
a
y
[
]
,
SPACE
i
n
t
SPACE
n
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
i
,
SPACE
e
l
e
m
e
n
t
,
SPACE
j
;
SPACE
ENTER
f
o
r
SPACE
(
i
SPACE
=
SPACE
1
;
SPACE
i
SPACE
<
SPACE
n
;
SPACE
i
+
+
)
SPACE
{
SPACE
e
l
e
m
e
n
t
SPACE
=
SPACE
a
r
r
a
y
[
i
]
;
SPACE
j
SPACE
=
SPACE
i
SPACE
-
SPACE
1
;
SPACE
w
h
i
l
e
SPACE
(
j
SPACE
>
=
SPACE
0
SPACE
&
&
SPACE
a
r
r
a
y
[
j
]
SPACE
>
SPACE
e
l
e
m
e
n
t
)
SPACE
{
SPACE
ENTER
a
r
r
a
y
[
j
SPACE
+
SPACE
1
]
SPACE
=
SPACE
a
r
r
a
y
[
j
]
;
SPACE
ENTER
j
SPACE
=
SPACE
j
SPACE
-
SPACE
1
;
SPACE
ENTER
}
SPACE
ENTER
a
r
r
a
y
[
j
SPACE
+
SPACE
1
]
SPACE
=
SPACE
e
l
e
m
e
n
t
;
SPACE
ENTER
}
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
F
u
n
c
t
i
o
n
SPACE
t
o
SPACE
p
r
i
n
t
SPACE
t
h
e
SPACE
e
l
e
m
e
n
t
s
SPACE
o
f
SPACE
a
n
SPACE
a
r
r
a
y
ENTER
v
o
i
d
SPACE
p
r
i
n
t
A
r
r
a
y
(
i
n
t
SPACE
a
r
r
a
y
[
]
,
SPACE
i
n
t
SPACE
n
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
i
;
SPACE
ENTER
f
o
r
SPACE
(
i
SPACE
=
SPACE
0
;
SPACE
i
SPACE
<
SPACE
n
;
SPACE
i
+
+
)
SPACE
ENTER
p
r
i
n
t
f
(
"
%
d
SPACE
"
,
SPACE
a
r
r
a
y
[
i
]
)
;
SPACE
ENTER
p
r
i
n
t
f
(
"
n
"
)
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
M
a
i
n
SPACE
F
u
n
c
t
i
o
n
SPACE
ENTER
i
n
t
SPACE
m
a
i
n
(
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
a
r
r
a
y
[
]
SPACE
=
SPACE
{
SPACE
1
2
2
,
SPACE
1
7
,
SPACE
9
3
,
SPACE
3
,
SPACE
5
6
SPACE
}
;
SPACE
ENTER
i
n
t
SPACE
n
SPACE
=
SPACE
s
i
z
e
o
f
(
a
r
r
a
y
)
SPACE
/
SPACE
s
i
z
e
o
f
(
a
r
r
a
y
[
0
]
)
;
SPACE
ENTER
i
n
s
e
r
t
i
o
n
S
o
r
t
(
a
r
r
a
y
,
SPACE
n
)
;
SPACE
ENTER
p
r
i
n
t
A
r
r
a
y
(
a
r
r
a
y
,
SPACE
n
)
;
SPACE
ENTER
r
e
t
u
r
n
SPACE
0
;
SPACE
ENTER
}
ENTER
ENTER
#
i
n
c
l
u
d
e
SPACE
<
s
t
d
i
o
.
h
>
SPACE
ENTER
/
/
SPACE
F
u
n
c
t
i
o
n
SPACE
t
o
SPACE
s
w
a
p
SPACE
e
l
e
m
e
n
t
s
ENTER
v
o
i
d
SPACE
s
w
a
p
(
i
n
t
SPACE
*
a
,
SPACE
i
n
t
SPACE
*
b
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
t
e
m
p
SPACE
=
SPACE
*
a
;
SPACE
ENTER
*
a
SPACE
=
SPACE
*
b
;
SPACE
ENTER
*
b
SPACE
=
SPACE
t
e
m
p
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
S
e
l
e
c
t
i
o
n
SPACE
S
o
r
t
ENTER
v
o
i
d
SPACE
s
e
l
e
c
t
i
o
n
S
o
r
t
(
i
n
t
SPACE
a
r
r
a
y
[
]
,
SPACE
i
n
t
SPACE
n
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
i
,
SPACE
j
,
SPACE
m
i
n
_
e
l
e
m
e
n
t
;
SPACE
ENTER
f
o
r
SPACE
(
i
SPACE
=
SPACE
0
;
SPACE
i
SPACE
<
SPACE
n
-
1
;
SPACE
i
+
+
)
SPACE
ENTER
{
ENTER
m
i
n
_
e
l
e
m
e
n
t
SPACE
=
SPACE
i
;
SPACE
ENTER
f
o
r
SPACE
(
j
SPACE
=
SPACE
i
+
1
;
SPACE
j
SPACE
<
SPACE
n
;
SPACE
j
+
+
)
SPACE
ENTER
i
f
SPACE
(
a
r
r
a
y
[
j
]
SPACE
<
SPACE
a
r
r
a
y
[
m
i
n
_
e
l
e
m
e
n
t
]
)
SPACE
ENTER
m
i
n
_
e
l
e
m
e
n
t
SPACE
=
SPACE
j
;
SPACE
ENTER
s
w
a
p
(
&
a
r
r
a
y
[
m
i
n
_
e
l
e
m
e
n
t
]
,
SPACE
&
a
r
r
a
y
[
i
]
)
;
SPACE
ENTER
}
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
F
u
n
c
t
i
o
n
SPACE
t
o
SPACE
p
r
i
n
t
SPACE
t
h
e
SPACE
e
l
e
m
e
n
t
s
SPACE
o
f
SPACE
a
n
SPACE
a
r
r
a
y
ENTER
v
o
i
d
SPACE
p
r
i
n
t
A
r
r
a
y
(
i
n
t
SPACE
a
r
r
a
y
[
]
,
SPACE
i
n
t
SPACE
s
i
z
e
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
i
;
SPACE
ENTER
f
o
r
SPACE
(
i
=
0
;
SPACE
i
SPACE
<
SPACE
s
i
z
e
;
SPACE
i
+
+
)
SPACE
ENTER
p
r
i
n
t
f
(
"
%
d
SPACE
"
,
SPACE
a
r
r
a
y
[
i
]
)
;
SPACE
ENTER
p
r
i
n
t
f
(
"
n
"
)
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
M
a
i
n
SPACE
F
u
n
c
t
i
o
n
ENTER
i
n
t
SPACE
m
a
i
n
(
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
a
r
r
a
y
[
]
SPACE
=
SPACE
{
1
5
,
SPACE
1
0
,
SPACE
9
9
,
SPACE
5
3
,
SPACE
3
6
}
;
SPACE
ENTER
i
n
t
SPACE
s
i
z
e
SPACE
=
SPACE
s
i
z
e
o
f
(
a
r
r
a
y
)
/
s
i
z
e
o
f
(
a
r
r
a
y
[
0
]
)
;
SPACE
ENTER
s
e
l
e
c
t
i
o
n
S
o
r
t
(
a
r
r
a
y
,
SPACE
s
i
z
e
)
;
SPACE
ENTER
p
r
i
n
t
f
(
"
S
o
r
t
e
d
SPACE
a
r
r
a
y
:
SPACE
n
"
)
;
SPACE
ENTER
p
r
i
n
t
A
r
r
a
y
(
a
r
r
a
y
,
SPACE
s
i
z
e
)
;
SPACE
ENTER
r
e
t
u
r
n
SPACE
0
;
SPACE
ENTER
}
ENTER
ENTER
#
i
n
c
l
u
d
e
<
s
t
d
i
o
.
h
>
SPACE
ENTER
/
/
SPACE
F
u
n
c
t
i
o
n
SPACE
t
o
SPACE
s
w
a
p
SPACE
t
w
o
SPACE
e
l
e
m
e
n
t
s
SPACE
ENTER
v
o
i
d
SPACE
s
w
a
p
E
l
e
m
e
n
t
s
(
i
n
t
*
SPACE
x
,
SPACE
i
n
t
*
SPACE
y
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
t
e
m
p
SPACE
=
SPACE
*
x
;
SPACE
ENTER
*
x
SPACE
=
SPACE
*
y
;
SPACE
ENTER
*
y
SPACE
=
SPACE
t
e
m
p
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
P
a
r
t
i
t
i
o
n
SPACE
f
u
n
c
t
i
o
n
ENTER
i
n
t
SPACE
p
a
r
t
i
t
i
o
n
SPACE
(
i
n
t
SPACE
a
r
r
[
]
,
SPACE
i
n
t
SPACE
l
o
w
I
n
d
e
x
,
SPACE
i
n
t
SPACE
h
i
g
h
I
n
d
e
x
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
p
i
v
o
t
E
l
e
m
e
n
t
SPACE
=
SPACE
a
r
r
[
h
i
g
h
I
n
d
e
x
]
;
ENTER
i
n
t
SPACE
i
SPACE
=
SPACE
(
l
o
w
I
n
d
e
x
SPACE
-
SPACE
1
)
;
SPACE
ENTER
f
o
r
SPACE
(
i
n
t
SPACE
j
SPACE
=
SPACE
l
o
w
I
n
d
e
x
;
SPACE
j
SPACE
<
=
SPACE
h
i
g
h
I
n
d
e
x
-
SPACE
1
;
SPACE
j
+
+
)
SPACE
ENTER
{
SPACE
ENTER
i
f
SPACE
(
a
r
r
[
j
]
SPACE
<
=
SPACE
p
i
v
o
t
E
l
e
m
e
n
t
)
SPACE
ENTER
{
SPACE
ENTER
i
+
+
;
SPACE
ENTER
s
w
a
p
E
l
e
m
e
n
t
s
(
&
a
r
r
[
i
]
,
SPACE
&
a
r
r
[
j
]
)
;
SPACE
ENTER
}
SPACE
ENTER
}
SPACE
ENTER
s
w
a
p
E
l
e
m
e
n
t
s
(
&
a
r
r
[
i
SPACE
+
SPACE
1
]
,
SPACE
&
a
r
r
[
h
i
g
h
I
n
d
e
x
]
)
;
SPACE
ENTER
r
e
t
u
r
n
SPACE
(
i
SPACE
+
SPACE
1
)
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
Q
u
i
c
k
S
o
r
t
SPACE
F
u
n
c
t
i
o
n
ENTER
v
o
i
d
SPACE
q
u
i
c
k
S
o
r
t
(
i
n
t
SPACE
a
r
r
[
]
,
SPACE
i
n
t
SPACE
l
o
w
I
n
d
e
x
,
SPACE
i
n
t
SPACE
h
i
g
h
I
n
d
e
x
)
SPACE
ENTER
{
SPACE
ENTER
i
f
SPACE
(
l
o
w
I
n
d
e
x
SPACE
<
SPACE
h
i
g
h
I
n
d
e
x
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
p
i
v
o
t
SPACE
=
SPACE
p
a
r
t
i
t
i
o
n
(
a
r
r
,
SPACE
l
o
w
I
n
d
e
x
,
SPACE
h
i
g
h
I
n
d
e
x
)
;
SPACE
ENTER
/
/
SPACE
S
e
p
a
r
a
t
e
l
y
SPACE
s
o
r
t
SPACE
e
l
e
m
e
n
t
s
SPACE
b
e
f
o
r
e
SPACE
&
SPACE
a
f
t
e
r
SPACE
p
a
r
t
i
t
i
o
n
SPACE
ENTER
q
u
i
c
k
S
o
r
t
(
a
r
r
,
SPACE
l
o
w
I
n
d
e
x
,
SPACE
p
i
v
o
t
SPACE
-
SPACE
1
)
;
SPACE
ENTER
q
u
i
c
k
S
o
r
t
(
a
r
r
,
SPACE
p
i
v
o
t
SPACE
+
SPACE
1
,
SPACE
h
i
g
h
I
n
d
e
x
)
;
SPACE
ENTER
}
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
F
u
n
c
t
i
o
n
SPACE
t
o
SPACE
p
r
i
n
t
SPACE
a
r
r
a
y
ENTER
v
o
i
d
SPACE
p
r
i
n
t
A
r
r
a
y
(
i
n
t
SPACE
a
r
r
[
]
,
SPACE
i
n
t
SPACE
s
i
z
e
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
i
;
SPACE
ENTER
f
o
r
SPACE
(
i
=
0
;
SPACE
i
SPACE
<
SPACE
s
i
z
e
;
SPACE
i
+
+
)
SPACE
ENTER
p
r
i
n
t
f
(
"
%
d
SPACE
"
,
SPACE
a
r
r
[
i
]
)
;
SPACE
ENTER
}
SPACE
ENTER
/
/
SPACE
M
a
i
n
SPACE
F
u
n
c
t
i
o
n
SPACE
ENTER
i
n
t
SPACE
m
a
i
n
(
)
SPACE
ENTER
{
SPACE
ENTER
i
n
t
SPACE
a
r
r
[
]
SPACE
=
SPACE
{
8
1
,
SPACE
2
7
,
SPACE
3
8
,
SPACE
9
9
,
SPACE
5
1
,
SPACE
5
}
;
SPACE
ENTER
i
n
t
SPACE
n
SPACE
=
SPACE
s
i
z
e
o
f
(
a
r
r
)
/
s
i
z
e
o
f
(
a
r
r
[
0
]
)
;
SPACE
ENTER
q
u
i
c
k
S
o
r
t
(
a
r
r
,
SPACE
0
,
SPACE
n
-
1
)
;
SPACE
ENTER
p
r
i
n
t
f
(
"
S
o
r
t
e
d
SPACE
a
r
r
a
y
:
SPACE
"
)
;
SPACE
ENTER
p
r
i
n
t
A
r
r
a
y
(
a
r
r
,
SPACE
n
)
;
SPACE
ENTER
r
e
t
u
r
n
SPACE
0
;
SPACE
ENTER
}
ENTER
ENTER
#
i
n
c
l
u
d
e
SPACE
<
s
t
d
i
o
.
h
>
ENTER
i
n
t
SPACE
m
a
i
n
(
)
SPACE
{
ENTER
/
T
A
B
/
SPACE
i
n
t
SPACE
n
,
SPACE
i
;
ENTER
/
T
A
B
/
SPACE
u
n
s
i
g
n
e
d
SPACE
l
o
n
g
SPACE
l
o
n
g
SPACE
f
a
c
t
SPACE
=
SPACE
1
;
ENTER
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
E
n
t
e
r
SPACE
a
n
SPACE
i
n
t
e
g
e
r
:
SPACE
"
)
;
ENTER
/
T
A
B
/
SPACE
s
c
a
n
f
(
"
%
d
"
,
SPACE
&
n
)
;
ENTER
ENTER
/
T
A
B
/
SPACE
/
/
SPACE
s
h
o
w
s
SPACE
e
r
r
o
r
SPACE
i
f
SPACE
t
h
e
SPACE
u
s
e
r
SPACE
e
n
t
e
r
s
SPACE
a
SPACE
n
e
g
a
t
i
v
e
SPACE
i
n
t
e
g
e
r
ENTER
/
T
A
B
/
SPACE
i
f
SPACE
(
n
SPACE
<
SPACE
0
)
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
E
r
r
o
r
!
SPACE
F
a
c
t
o
r
i
a
l
SPACE
o
f
SPACE
a
SPACE
n
e
g
a
t
i
v
e
SPACE
n
u
m
b
e
r
SPACE
d
o
e
s
n
'
t
SPACE
e
x
i
s
t
.
"
)
;
SPACE
ENTER
/
T
A
B
/
SPACE
e
l
s
e
SPACE
{
SPACE
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
f
o
r
SPACE
(
i
SPACE
=
SPACE
1
;
SPACE
i
SPACE
<
=
SPACE
n
;
SPACE
+
+
i
)
SPACE
{
SPACE
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
f
a
c
t
SPACE
*
=
SPACE
i
;
SPACE
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
}
SPACE
ENTER
/
T
A
B
/
SPACE
/
T
A
B
/
SPACE
p
r
i
n
t
f
(
"
F
a
c
t
o
r
i
a
l
SPACE
o
f
SPACE
%
d
SPACE
=
SPACE
%
l
l
u
"
,
SPACE
n
,
SPACE
f
a
c
t
)
;
SPACE
ENTER
/
T
A
B
/
SPACE
}
SPACE
ENTER
SPACE
ENTER
/
T
A
B
/
SPACE
r
e
t
u
r
n
SPACE
0
;
SPACE
ENTER
}
SPACE
ENTER
